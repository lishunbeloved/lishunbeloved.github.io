<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MarkDowm 文档格式模版</title>
      <link href="/2021/01/02/MarkDown%E6%A8%A1%E7%89%88/"/>
      <url>/2021/01/02/MarkDown%E6%A8%A1%E7%89%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MarkDow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDowm 文档格式模版</title>
      <link href="/2021/01/02/MarkDown%E6%A8%A1%E7%89%88%E6%A0%BC%E5%BC%8F/"/>
      <url>/2021/01/02/MarkDown%E6%A8%A1%E7%89%88%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>写法    解释<br>sticky  【必需】文章置顶<br>title    【必需】文章标题<br>date    【必需】文章创建日期<br>updated    【可选】文章更新日期<br>tags    【可选】文章标籤<br>categories    【可选】文章分类<br>keywords    【可选】文章关键字<br>description    【可选】文章描述<br>top_img    【可选】文章顶部图片<br>cover    【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)<br>comments    【可选】显示文章评论模块(默认 true)<br>toc    【可选】显示文章TOC(默认为设置中toc的enable配置)<br>toc_number    【可选】显示toc_number(默认为设置中toc的number配置)<br>copyright    【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author    【可选】文章版权模块的文章作者<br>copyright_author_href    【可选】文章版权模块的文章作者链接<br>copyright_url    【可选】文章版权模块的文章连结链接<br>copyright_info    【可选】文章版权模块的版权声明文字<br>mathjax    【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex    【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aplayer    【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink    【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)<br>aside    【可选】显示侧边栏 (默认 true)</p>]]></content>
      
      
      <categories>
          
          <category> MarkDow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Typescript</title>
      <link href="/2021/01/02/web/TypeScript/Typescript/"/>
      <url>/2021/01/02/web/TypeScript/Typescript/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Typescript"><a href="#安装-Typescript" class="headerlink" title="安装 Typescript"></a>安装 Typescript</h2><p>​    <strong>Typescript 官网地址</strong>: <a href="https://www.typescriptlang.org/zh/">https://www.typescriptlang.org/zh/</a></p><p>​    使用 nvm 来管理 node 版本: <a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><h2 id="安装Typescript"><a href="#安装Typescript" class="headerlink" title="安装Typescript"></a>安装Typescript</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><h2 id="使用-tsc-全局命令"><a href="#使用-tsc-全局命令" class="headerlink" title="使用 tsc 全局命令"></a>使用 tsc 全局命令</h2><ol><li>查看 tsc 版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><ol start="2"><li>编译 ts 文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc fileName.ts</span><br></pre></td></tr></table></figure><h2 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h2><p><strong>原始数据类型 - primitive values:</strong></p><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Biglnt</li><li>Sting</li><li>Symbol</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔类型</span></span><br><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number注意: es6 支持2进制和8进制</span></span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> binaryNumber: <span class="built_in">number</span> = <span class="number">0b1111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后是字符串，注意es6新增的模版字符串也是没有问题的</span></span><br><span class="line"><span class="keyword">let</span> firstName: <span class="built_in">string</span> = <span class="string">&#x27;lishun&#x27;</span></span><br><span class="line"><span class="keyword">let</span> message: <span class="built_in">string</span> = <span class="string">`Hello, <span class="subst">$&#123;firstName&#125;</span>, age is <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined 和 null</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p><strong>any 类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">9</span></span><br><span class="line">notSure = <span class="string">&#x27;maybe it is a string&#x27;</span></span><br><span class="line">notSure = <span class="string">&#x27;boolean&#x27;</span></span><br><span class="line"><span class="comment">// 在任意值上访问任何属性都是允许的：</span></span><br><span class="line">notSure.myName</span><br><span class="line"><span class="comment">// 也允许调用任何方法：</span></span><br><span class="line">notSure.getName()</span><br></pre></td></tr></table></figure><h2 id="Array-和-Tuple"><a href="#Array-和-Tuple" class="headerlink" title="Array 和 Tuple"></a>Array 和 Tuple</h2><p>Typescript 文档地址：<a href="https://www.typescriptlang.org/docs/handbook/basic-types.html#array">Array 和Tuple</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最简单的方法是使用「类型 + 方括号」来表示数组：</span></span><br><span class="line"><span class="keyword">let</span> arrOfNumbers: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">//数组的项中不允许出现其他的类型：</span></span><br><span class="line"><span class="comment">//数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：</span></span><br><span class="line">arrOfNumbers.push(<span class="number">3</span>)</span><br><span class="line">arrOfNumbers.push(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元祖的表示和数组非常类似，只不过它将类型写在了里面 这就对每一项起到了限定的作用</span></span><br><span class="line"><span class="keyword">let</span> user: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;viking&#x27;</span>, <span class="number">20</span>]</span><br><span class="line"><span class="comment">//但是当我们写少一项 就会报错 同样写多一项也会有问题</span></span><br><span class="line">user = [<span class="string">&#x27;molly&#x27;</span>, <span class="number">20</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><h2 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们定义一个接口 person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接着我们定义一个变量alis，它的类型是Person这样我们就可以约束 alis 的形状和接口 Person 一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> alis: Person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alis&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时候我们不需要完全匹配一个形状，那么我们可以用可选属性：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person1 &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> alis1: Person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alis1&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readonly ：定义只读属性，有时候我们希望对象中的一些字段只能在创建的时候赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person2 &#123;</span><br><span class="line">    <span class="keyword">readonly</span> id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> alis2: Person2 = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">12321</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alis2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约定输入，约定输出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span> ? x + y + z : x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数本身的类型</span></span><br><span class="line"><span class="keyword">const</span> add3: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = add</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface 描述函数类型</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> sType &#123;</span><br><span class="line">    (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum2: sType = sum</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类型推论，联合类型和类型断言"><a href="#类型推论，联合类型和类型断言" class="headerlink" title="类型推论，联合类型和类型断言"></a>类型推论，联合类型和类型断言</h2><ol><li><strong>联合类型 - union types</strong></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们只需要用 &quot;|&quot;</span></span><br><span class="line"><span class="keyword">let</span> numOrString: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span></span><br><span class="line"><span class="comment">// typescript 不确定一个联合类型的变量到底是那个类型的时候我们只能访问此联合类型里共有的属性或方法</span></span><br><span class="line">numOrString = <span class="string">&#x27;fsf&#x27;</span></span><br><span class="line">numOrString = <span class="number">23</span></span><br><span class="line">numOrString = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>类型断言 - type assertions</strong></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我们可以用 as 关键字，告诉typescript 编辑器，你没法判断我的代码，但是我本人很清楚，这里我就把它看成一个string ，你可以给它 string 的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">input: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> str = input <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">if</span> (str.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> str.length</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">number</span> = input <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">number</span>.toString().length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>类型守卫 - type guard</strong></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typescript 在不同的条件分支里面，只能的缩小了范围，这样我们代码出错的几率就大大的降低了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength2</span>(<span class="params">input: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.length</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toString().length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><ol><li><strong>面向对象编程的三大特点</strong></li></ol><ul><li>封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能对外提供接口来访问该对象。</li><li>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性。</li><li>多态（Polymorphism）：由继承而产生了相关的不同类，对同一个方法可以有不同的响应。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span> :<span class="built_in">string</span> ;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is running`</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> snake = <span class="keyword">new</span> Animal(<span class="string">&#x27;lisa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承的特性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">brak</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is braking`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xiaobao = <span class="keyword">new</span> Dog(<span class="string">&#x27;xiaobao&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xiaobao.run());</span><br><span class="line"><span class="built_in">console</span>.log(xiaobao.brak());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里我们重写构造函数，注意在子类的构造函数中,必须使用super 调用父类的写法，要不就会报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Meow&#x27;</span>+<span class="built_in">super</span>.run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> maomao = <span class="keyword">new</span> Cat(<span class="string">&#x27;maomao&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(maomao.run());</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>类成员修饰符</strong></li></ol><ul><li>public 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是public</li><li>private 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li><li>protected 修饰的属性或方法是受保护的，它和 private 类似，区别是它在子类中也是允许被访问的</li></ul><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
