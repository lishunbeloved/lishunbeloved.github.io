<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MarkDowm 文档格式模版</title>
      <link href="/2021/01/02/MarkDown%E6%A8%A1%E7%89%88/"/>
      <url>/2021/01/02/MarkDown%E6%A8%A1%E7%89%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MarkDow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDowm 文档格式模版</title>
      <link href="/2021/01/02/MarkDown%E6%A8%A1%E7%89%88%E6%A0%BC%E5%BC%8F/"/>
      <url>/2021/01/02/MarkDown%E6%A8%A1%E7%89%88%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>写法    解释<br>sticky  【必需】文章置顶<br>title    【必需】文章标题<br>date    【必需】文章创建日期<br>updated    【可选】文章更新日期<br>tags    【可选】文章标籤<br>categories    【可选】文章分类<br>keywords    【可选】文章关键字<br>description    【可选】文章描述<br>top_img    【可选】文章顶部图片<br>cover    【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)<br>comments    【可选】显示文章评论模块(默认 true)<br>toc    【可选】显示文章TOC(默认为设置中toc的enable配置)<br>toc_number    【可选】显示toc_number(默认为设置中toc的number配置)<br>copyright    【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author    【可选】文章版权模块的文章作者<br>copyright_author_href    【可选】文章版权模块的文章作者链接<br>copyright_url    【可选】文章版权模块的文章连结链接<br>copyright_info    【可选】文章版权模块的版权声明文字<br>mathjax    【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex    【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aplayer    【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink    【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)<br>aside    【可选】显示侧边栏 (默认 true)</p>]]></content>
      
      
      <categories>
          
          <category> MarkDow </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Type</title>
      <link href="/2021/01/02/test/"/>
      <url>/2021/01/02/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Type </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Type </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript</title>
      <link href="/2021/01/02/Typescript/"/>
      <url>/2021/01/02/Typescript/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Typescript"><a href="#安装-Typescript" class="headerlink" title="安装 Typescript"></a>安装 Typescript</h2><p>​    <strong>Typescript 官网地址</strong>: <a href="https://www.typescriptlang.org/zh/">https://www.typescriptlang.org/zh/</a></p><p>​    使用 nvm 来管理 node 版本: <a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><h2 id="安装Typescript"><a href="#安装Typescript" class="headerlink" title="安装Typescript"></a>安装Typescript</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><h2 id="使用-tsc-全局命令"><a href="#使用-tsc-全局命令" class="headerlink" title="使用 tsc 全局命令"></a>使用 tsc 全局命令</h2><ol><li>查看 tsc 版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><ol start="2"><li>编译 ts 文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc fileName.ts</span><br></pre></td></tr></table></figure><h2 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h2><p><strong>原始数据类型 - primitive values:</strong></p><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Biglnt</li><li>Sting</li><li>Symbol</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔类型</span></span><br><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number注意: es6 支持2进制和8进制</span></span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> binaryNumber: <span class="built_in">number</span> = <span class="number">0b1111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后是字符串，注意es6新增的模版字符串也是没有问题的</span></span><br><span class="line"><span class="keyword">let</span> firstName: <span class="built_in">string</span> = <span class="string">&#x27;lishun&#x27;</span></span><br><span class="line"><span class="keyword">let</span> message: <span class="built_in">string</span> = <span class="string">`Hello, <span class="subst">$&#123;firstName&#125;</span>, age is <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined 和 null</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p><strong>any 类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">9</span></span><br><span class="line">notSure = <span class="string">&#x27;maybe it is a string&#x27;</span></span><br><span class="line">notSure = <span class="string">&#x27;boolean&#x27;</span></span><br><span class="line"><span class="comment">// 在任意值上访问任何属性都是允许的：</span></span><br><span class="line">notSure.myName</span><br><span class="line"><span class="comment">// 也允许调用任何方法：</span></span><br><span class="line">notSure.getName()</span><br></pre></td></tr></table></figure><h2 id="Array-和-Tuple"><a href="#Array-和-Tuple" class="headerlink" title="Array 和 Tuple"></a>Array 和 Tuple</h2><p>Typescript 文档地址：<a href="https://www.typescriptlang.org/docs/handbook/basic-types.html#array">Array 和Tuple</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最简单的方法是使用「类型 + 方括号」来表示数组：</span></span><br><span class="line"><span class="keyword">let</span> arrOfNumbers: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">//数组的项中不允许出现其他的类型：</span></span><br><span class="line"><span class="comment">//数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：</span></span><br><span class="line">arrOfNumbers.push(<span class="number">3</span>)</span><br><span class="line">arrOfNumbers.push(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元祖的表示和数组非常类似，只不过它将类型写在了里面 这就对每一项起到了限定的作用</span></span><br><span class="line"><span class="keyword">let</span> user: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;viking&#x27;</span>, <span class="number">20</span>]</span><br><span class="line"><span class="comment">//但是当我们写少一项 就会报错 同样写多一项也会有问题</span></span><br><span class="line">user = [<span class="string">&#x27;molly&#x27;</span>, <span class="number">20</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><h2 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们定义一个接口 person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接着我们定义一个变量alis，它的类型是Person这样我们就可以约束 alis 的形状和接口 Person 一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> alis: Person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alis&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时候我们不需要完全匹配一个形状，那么我们可以用可选属性：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person1 &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> alis1: Person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alis1&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readonly ：定义只读属性，有时候我们希望对象中的一些字段只能在创建的时候赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person2 &#123;</span><br><span class="line">    <span class="keyword">readonly</span> id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> alis2: Person2 = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">12321</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;alis2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约定输入，约定输出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span> ? x + y + z : x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数本身的类型</span></span><br><span class="line"><span class="keyword">const</span> add3: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = add</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface 描述函数类型</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> sType &#123;</span><br><span class="line">    (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum2: sType = sum</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类型推论，联合类型和类型断言"><a href="#类型推论，联合类型和类型断言" class="headerlink" title="类型推论，联合类型和类型断言"></a>类型推论，联合类型和类型断言</h2><ol><li><strong>联合类型 - union types</strong></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们只需要用 &quot;|&quot;</span></span><br><span class="line"><span class="keyword">let</span> numOrString: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span></span><br><span class="line"><span class="comment">// typescript 不确定一个联合类型的变量到底是那个类型的时候我们只能访问此联合类型里共有的属性或方法</span></span><br><span class="line">numOrString = <span class="string">&#x27;fsf&#x27;</span></span><br><span class="line">numOrString = <span class="number">23</span></span><br><span class="line">numOrString = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>类型断言 - type assertions</strong></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我们可以用 as 关键字，告诉typescript 编辑器，你没法判断我的代码，但是我本人很清楚，这里我就把它看成一个string ，你可以给它 string 的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">input: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> str = input <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">if</span> (str.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> str.length</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">number</span> = input <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">number</span>.toString().length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>类型守卫 - type guard</strong></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typescript 在不同的条件分支里面，只能的缩小了范围，这样我们代码出错的几率就大大的降低了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength2</span>(<span class="params">input: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.length</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toString().length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><ol><li><strong>面向对象编程的三大特点</strong></li></ol><ul><li>封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能对外提供接口来访问该对象。</li><li>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性。</li><li>多态（Polymorphism）：由继承而产生了相关的不同类，对同一个方法可以有不同的响应。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span> :<span class="built_in">string</span> ;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is running`</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> snake = <span class="keyword">new</span> Animal(<span class="string">&#x27;lisa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承的特性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">brak</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is braking`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xiaobao = <span class="keyword">new</span> Dog(<span class="string">&#x27;xiaobao&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xiaobao.run());</span><br><span class="line"><span class="built_in">console</span>.log(xiaobao.brak());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里我们重写构造函数，注意在子类的构造函数中,必须使用super 调用父类的写法，要不就会报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Meow&#x27;</span>+<span class="built_in">super</span>.run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> maomao = <span class="keyword">new</span> Cat(<span class="string">&#x27;maomao&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(maomao.run());</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>类成员修饰符</strong></li></ol><ul><li>public 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是public</li><li>private 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li><li>protected 修饰的属性或方法是受保护的，它和 private 类似，区别是它在子类中也是允许被访问的</li></ul><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Radio &#123;</span><br><span class="line">    switchRadio(trigger: <span class="built_in">boolean</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">implements</span> <span class="title">Radio</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">switchRadio</span>(<span class="params">trigger</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cellphone</span> <span class="title">implements</span> <span class="title">Radio</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">switchRadio</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Battery &#123;</span><br><span class="line">    checkBatteryStatus(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要实现多个接口，我们只需要中间用 逗号 隔开即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cellphone2</span> <span class="title">implements</span> <span class="title">Radio</span>, <span class="title">Battery</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">switchRadio</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">checkBatteryStatus</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举-Enums"><a href="#枚举-Enums" class="headerlink" title="枚举 Enums"></a>枚举 Enums</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字枚举，一个数字枚举可以用 enum 这个关键词来定义，我们定义一系列的方向，然后这里面的值，枚举成员会被赋值从 0 开始递增的数字</span></span><br><span class="line"><span class="built_in">enum</span> Direction &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Direction.Up);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有一个神奇的点是这个枚举还做了反向映射</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串枚举</span></span><br><span class="line"><span class="built_in">enum</span> Direction1 &#123;</span><br><span class="line">    Up = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">    Down = <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">    Left = <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">    Right = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="string">&#x27;UP&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (value === Direction1.Up) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型-Generices"><a href="#泛型-Generices" class="headerlink" title="泛型 Generices"></a>泛型 Generices</h2><p>​    泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = echo(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个时候我们发现一个问题，我们传入了数字，但是返回了 any</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo1</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result2 = echo1(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型也可以传入多个值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">tuple: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result3 = swap([<span class="string">&#x27;string&#x27;</span>, <span class="number">123</span>])</span><br></pre></td></tr></table></figure><h2 id="泛型第二部分-泛型约束"><a href="#泛型第二部分-泛型约束" class="headerlink" title="泛型第二部分 - 泛型约束"></a>泛型第二部分 - 泛型约束</h2><p>​    在函数内部使用泛型变量的时候，由于事先不知道它是那种类型，所以不能随意的操作它的属性或方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function echoWithArr&lt;T&gt;(arr: T): T &#123;</span></span><br><span class="line"><span class="comment">//     console.log(arr.length);</span></span><br><span class="line"><span class="comment">//     return arr</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 上例中，泛型 T 不一定包含属性 length， 我们可以给他穿入任意类型，当然有些不包括 length 属性，那样就会报错</span></span><br><span class="line"><span class="keyword">interface</span> IwithLenght &#123;</span><br><span class="line">    <span class="attr">lenght</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">IwithLenght</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.lenght);</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// echoWithLength(&#x27;str&#x27;); X</span></span><br><span class="line"><span class="keyword">const</span> result8 = echoWithLength(&#123; <span class="attr">lenght</span>: <span class="number">10</span> &#125;)</span><br><span class="line"><span class="comment">// const result9 = echoWithLength([1,2,3]) X</span></span><br></pre></td></tr></table></figure><h2 id="泛型第三部分-泛型与类和接口"><a href="#泛型第三部分-泛型与类和接口" class="headerlink" title="泛型第三部分 - 泛型与类和接口"></a>泛型第三部分 - 泛型与类和接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> data = [];</span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.shift()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">queue.push(<span class="number">1</span>);</span><br><span class="line">queue.push(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上诉代码中存在一个问题，它允许你先队列添加任何类型的数据，当然当数据弹出队列时，也可以是任意类型。在上面的示例中，看起来人们可以相对列中添加string 类型的数据，但是那么在使用的过程中，就会出现我们无法捕捉到的错误</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue1</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> data = []</span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">item: T</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    pop(): T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.shift()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> queue1 = <span class="keyword">new</span> Queue1&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型和 interface</span></span><br><span class="line"><span class="keyword">interface</span> keyPair&lt;T, U&gt; &#123;</span><br><span class="line">    <span class="attr">key</span>: T,</span><br><span class="line">    <span class="attr">value</span>: U</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> kp1: keyPair&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt; = &#123; <span class="attr">key</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">&#x27;string&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> kp2: keyPair&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = &#123; <span class="attr">key</span>: <span class="string">&#x27;string&#x27;</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="类型别名-和-交叉类型"><a href="#类型别名-和-交叉类型" class="headerlink" title="类型别名 和 交叉类型"></a>类型别名 和 交叉类型</h2><p>​    <strong>类型别名 Type Aliases</strong></p><p>​    类型别名，就是给类型起一个别名，让它可以更方便的被重用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum: <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> result  = sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">type</span> PlusType = <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>)=&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> sum2: PlusType</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持联合类型</span></span><br><span class="line"><span class="keyword">type</span> StrOrNumber = <span class="built_in">string</span> |<span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> result2: StrOrNumber = <span class="number">124</span></span><br><span class="line">result2 = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串字面量</span></span><br><span class="line"><span class="keyword">type</span>  Directions = <span class="string">&#x27;up&#x27;</span>|<span class="string">&#x27;down&#x27;</span>|<span class="string">&#x27;left&#x27;</span>|<span class="string">&#x27;right&#x27;</span></span><br><span class="line"><span class="keyword">let</span> toWhere:Directions = <span class="string">&#x27;right&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>交叉类型 Intersection Types</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Iname&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> IPerson = Iname &amp; &#123;<span class="attr">age</span>:<span class="built_in">number</span>,<span class="attr">info</span>:<span class="built_in">string</span>&#125;</span><br><span class="line"><span class="keyword">let</span> person:IPerson = &#123;<span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,<span class="attr">age</span>:<span class="number">124</span>,<span class="attr">info</span>:<span class="string">&#x27;hello person&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;mam&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;good&#x27;</span>]</span><br><span class="line"><span class="comment">// 大家可以看到这个类型，不同的文件中有多定义，当时他们都是 内部定义的一部分，然后根据不同的版本或功能合并在了一起，一个interface 或者 类多次定义会和并在一起。这些文件一般都是以 lib 开头，以 d.ts 结尾，告诉大家，我是一个类置对象类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date:<span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/abc/</span></span><br><span class="line"><span class="comment">// 我们还可以使用一些 build in object , 内置对象，比如 Math 与其他全局对象不同的是， Math 的所有属性与方法都是静态的。</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DOM 和 BOM 对象</span></span><br><span class="line"><span class="comment">// document 对象，返回的是一个 HTMLElement</span></span><br><span class="line"><span class="keyword">let</span> body:HTMLElement = <span class="built_in">document</span>.body</span><br><span class="line"><span class="comment">// document 上面的query 方法，返回的是一个nodeList 类型</span></span><br><span class="line"><span class="keyword">let</span> allLis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然添加事件也是重要的一部分，document 上面有 addEventListener 方法，注意这个回调函数，应为类型推断，这里面的 e 事件对象也会自动获得了了行，这里是个 mouseEvent 类型， 因为点击类一个鼠标事件，现在我们可以方便的使用 e 上面的方法和属性</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>*<em>Utility types</em></p><p>​    Typescript 还提供了一些功能性，帮助性的类型，大家在 js 的世界是看不到的，这些类型叫做 utility types ，提供了一些简洁明快而且非常方便的功能。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Partial ，它可以把传入的类型都变成可选</span></span><br><span class="line"><span class="keyword">interface</span> IPerson2&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> lishun: IPerson2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;lishun&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;</span><br><span class="line"><span class="keyword">type</span> Ipartial = Partial&lt;IPerson2&gt;</span><br><span class="line"><span class="keyword">let</span> lishun2:Ipartial = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Omit，它返回的类型可以忽略传入类型的某个属性</span></span><br><span class="line"><span class="keyword">type</span> IOmit = Omit&lt;IPerson2,<span class="string">&#x27;name&#x27;</span>&gt;</span><br><span class="line"><span class="keyword">let</span> lishun3:IOmit = &#123;<span class="attr">age</span>:<span class="number">234</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0 新特性</title>
      <link href="/2021/01/02/vue3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2021/01/02/vue3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="初识-Vue3-0：新特性"><a href="#初识-Vue3-0：新特性" class="headerlink" title="初识 Vue3.0：新特性"></a>初识 Vue3.0：新特性</h2><p>​    Vue3 的文档地址：<a href="https://v3.vuejs.org/">https://v3.vuejs.org</a></p><h2 id="配置vue3开发环境"><a href="#配置vue3开发环境" class="headerlink" title="配置vue3开发环境"></a>配置vue3开发环境</h2><p><strong>Vue cli</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 安装或升级</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR </span><br><span class="line">yar global add @vue/cli</span><br><span class="line"></span><br><span class="line">// 保证 vue cli 版本在 4.5 以上</span><br><span class="line">vue --version</span><br><span class="line"></span><br><span class="line">// 创建项目</span><br><span class="line">vue create my-project</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>然后步骤</strong></p><ul><li>Please pick a preset - 选择 Manually select features</li><li>Check the features needed for your project - 多选择Typescript，特别注意点空格是选择，点回车是下一步</li><li>Choose a version of Vue.js that you want to start the project with - 选择 3.x (Preview)</li><li>Use class-style component syntax - 输入 <strong>n</strong>，回车</li><li>Use Babel alongside TypeScript - 输入<strong>n</strong>，回车</li><li>Pick a linter / formatter config - 直接回车</li><li>Pick additional lint features - 直接回车</li><li>Where do you prefer placing config for Babel, ESLint, etc.? - 直接回车</li><li>Save this as a preset for future projects? - 输入<strong>n</strong>，回车</li></ul><p><strong>启动图形化界面创建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><h2 id="项目结构和插件"><a href="#项目结构和插件" class="headerlink" title="项目结构和插件"></a>项目结构和插件</h2><p><strong>推荐给大家安装的插件</strong></p><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">Eslint 插件</a></strong></p><p>如果 eslint 不生效，可以在根目录创建 .vscode 文件夹，然后在文件夹中创建 settings.json 然后输入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;typescript&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ref-语法"><a href="#Ref-语法" class="headerlink" title="Ref 语法"></a>Ref 语法</h2><ul><li>setup 方法</li><li>ref 函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;count&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;double&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;increase&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">setup() &#123;</span><br><span class="line">  // ref 是一个函数，它接受一个参数，返回的就是一个神奇的 响应式对象 。我们初始化的这个 0 作为参数包裹到这个对象中去，在未来可以检测到改变并作出对应的相应。</span><br><span class="line">  const count = ref(0)</span><br><span class="line">  const double = computed(() =&gt; &#123;</span><br><span class="line">    return count.value * 2</span><br><span class="line">  &#125;)</span><br><span class="line">  const increase = () =&gt; &#123;</span><br><span class="line">    count.value++</span><br><span class="line">  &#125;</span><br><span class="line">  return &#123;</span><br><span class="line">    count,</span><br><span class="line">    increase,</span><br><span class="line">    double</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reactive-函数"><a href="#Reactive-函数" class="headerlink" title="Reactive 函数"></a>Reactive 函数</h2><p><a href="https://v3.vuejs.org/guide/reactivity-fundamentals.html#declaring-reactive-state">Reactive 函数</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">interface DataProps &#123;</span><br><span class="line">  <span class="attr">count</span>: number;</span><br><span class="line">  double: number;</span><br><span class="line">  increase: <span class="function">() =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data: DataProps  = reactive(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">increase</span>: <span class="function">() =&gt;</span> &#123; data.count++&#125;,</span><br><span class="line">    <span class="attr">double</span>: computed(<span class="function">() =&gt;</span> data.count * <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> refData = toRefs(data)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...refData</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 ref 还是 reactive 可以选择这样的准则</p><ul><li>第一，就像刚才的原生 javascript 的代码一样，像你平常写普通的 js 代码选择原始类型和对象类型一样来选择是使用 ref 还是 reactive。</li><li>第二，所有场景都使用 reactive，但是要记得使用 toRefs 保证 reactive 对象属性保持响应性。</li></ul><h2 id="vue-响应式对象的新花样"><a href="#vue-响应式对象的新花样" class="headerlink" title="vue 响应式对象的新花样"></a>vue 响应式对象的新花样</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue2</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">key</span>)</span>&#123;&#125;,</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">key,value</span>)</span>&#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ue3-生命周期"><a href="#ue3-生命周期" class="headerlink" title="ue3 生命周期"></a>ue3 生命周期</h2><p><a href="https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html">生命周期</a></p><p>在 setup 中使用的 hook 名称和原来生命周期的对应关系</p><p>​    vue2                                vue3</p><ul><li><p>beforeCreate -&gt; 不需要 use setup()</p></li><li><p>created -&gt; 不需要 use setup()</p></li><li><p>beforeMount -&gt; onBeforeMount</p></li><li><p>mounted -&gt; onMounted</p></li><li><p>beforeUpdate -&gt; onBeforeUpdate</p></li><li><p>updated -&gt; onUpdated</p></li><li><p>beforeUnmount -&gt; onBeforeUnmount</p></li><li><p>unmounted -&gt; onUnmounted</p></li><li><p>errorCaptured -&gt; onErrorCaptured</p><p>下面两个调试用的</p></li><li><p>renderTracked -&gt; onRenderTracked </p></li><li><p>renderTriggered -&gt; onRenderTriggered</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">  onMounted(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;mounted&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUpdated(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;updated&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">// 调试用的</span><br><span class="line">  onRenderTriggered((event) =&gt; &#123;</span><br><span class="line">    console.log(event)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// watch 简单应用</span><br><span class="line">watch(data, () =&gt; &#123;</span><br><span class="line">  document.title = &#x27;updated &#x27; + data.count</span><br><span class="line">&#125;)</span><br><span class="line">// watch 的两个参数，代表新的值和旧的值</span><br><span class="line">watch(refData.count, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;old&#x27;, oldValue)</span><br><span class="line">  console.log(&#x27;new&#x27;, newValue)</span><br><span class="line">  document.title = &#x27;updated &#x27; + data.count</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// watch 多个值，返回的也是多个值的数组</span><br><span class="line">watch([greetings, data], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;old&#x27;, oldValue)</span><br><span class="line">  console.log(&#x27;new&#x27;, newValue)</span><br><span class="line">  document.title = &#x27;updated&#x27; + greetings.value + data.count</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 使用 getter 的写法 watch reactive 对象中的一项</span><br><span class="line">watch([greetings, () =&gt; data.count], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;old&#x27;, oldValue)</span><br><span class="line">  console.log(&#x27;new&#x27;, newValue)</span><br><span class="line">  document.title = &#x27;updated&#x27; + greetings.value + data.count</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
